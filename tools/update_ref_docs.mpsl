/*

    update_ref_docs.mpsl

    Updates some MP reference documents.

    ttcdt <dev@triptico.com> et al.

*/

sub load_ref_document_txt(file)
/* loads a document and returns a structure with header,
   data entries and signature */
{
    local f, l, d, k;
    local r = {
        'header'    => NULL,
        'data'      => {},
        'sig'       => ''
    };

    if ((f = open(file, "r")) == NULL)
        return NULL;

    d = [];
    k = NULL;

    while (l = read(f)) {
        l = sregex(l, "/\r?\n$/");

        /* is the line only dashes? */
        if (regex(l, '/^-+$/')) {

            /* pop last string */
            local p = pop(d);

            /* concat all data and reset */
            local b = join(d, "\n");
            d = [];

            /* flush previous data: is this the first one? */
            if (k == NULL) {
                /* yes; everything is the header */
                r.header = b;
            }
            else {
                /* there is a previous one; store */
                r.data[k] = b->sregex("/\n$/")->sregex("/^\n/");
            }

            k = p;

            /* if it's the empty string, it's the
               signature mark; we're done */
            if (p == '') {
                r.sig = join([ l, read(f) ], "\n");
                break;
            }
        }
        else
            push(d, l);
    }

    close(f);

    return r;
}


sub save_ref_document_txt(file, r, hash, prefix, def)
/* saves a parsed document filling empty entries from hash */
{
    local f;

    if ((f = open(file, "w"))) {
        f->write(r.header, "\n");

        foreach (k, sort(map(hash, sub (v, i) { i; }))) {
            if (prefix)
                k = prefix + '.' + k;

            f->write(k, "\n");
            f->write(sregex(k, '/./g', '-'));
            f->write("\n\n");

            f->write(r.data[k] || def[k] || "To be written.");
            f->write("\n\n");
        }

        f->write("\n", r.sig);

        f->close();
    }
}


sub load_ref_document_gmi(file)
/* loads a document and returns a structure with header,
   data entries and signature (Gemtext) */
{
    local f, d, k;
    local r = {
        'header'    => NULL,
        'data'      => {},
        'sig'       => ''
    };

    if ((f = open(file, "r")) == NULL)
        return NULL;

    d = [];
    k = NULL;

    foreach (l, f) {
        l = sregex(l, "/\r?\n$/");

        /* all ---? signature and end */
        if (l->regex("/^-+$/")) {
            r.sig = join([l, read(f)], "\n");

            r.data[k] = d->join("\n")->
                sregex("/^\n/")->sregex("/\n+$/");

            break;
        }

        /* starts with ##? */
        if (regex(l, '/^## /')) {
            /* concat all data and reset */
            local b = join(d, "\n");
            d = [];

            /* flush previous data: is this the first one? */
            if (k == NULL) {
                /* yes; everything is the header */
                r.header = b;
            }
            else {
                /* there is a previous one; store */
                r.data[k] = b->sregex("/\n$/")->sregex("/^\n/");
            }

            k = l->slice(3, -1);
        }
        else
            push(d, l);
    }

    close(f);

    return r;
}


sub save_ref_document_gmi(file, r, hash, prefix, def)
/* saves a parsed document filling empty entries from hash (Gemtext) */
{
    local f;

    if ((f = open(file, "w"))) {
        f->write(r.header, "\n");

        foreach (k, hash->map(index)->sort()) {
            if (prefix)
                k = prefix + '.' + k;

            f->write("## ", k, "\n\n");

            f->write(r.data[k] || def[k] || "To be written.");
            f->write("\n\n");
        }

        if (r.sig != "")
            f->write("\n", r.sig);

        f->close();
    }
}


sub update_ref_document_txt_txt(file, hash, prefix, def)
{
    local r;

    if (r = load_ref_document_txt(file))
        save_ref_document_txt(file, r, hash, prefix, def);
}

sub update_ref_document_txt_gmi(txt_file, gmi_file, hash, prefix, def)
{
    local r;

    if (r = load_ref_document_txt(txt_file))
        save_ref_document_gmi(gmi_file, r, hash, prefix, def);
}


sub load_ref_document(in_file)
{
    local r;

    if (in_file->regex("/\.gmi$"))
        r = load_ref_document_gmi(in_file);
    else
        r = load_ref_document_txt(in_file);

    return r;
}


sub save_ref_document(out_file, r, hash, prefix, def)
{
    if (out_file->regex("/\.gmi$"))
        save_ref_document_gmi(out_file, r, hash, prefix, def);
    else
        save_ref_document_txt(out_file, r, hash, prefix, def);
}


sub update_ref_document(in_file, out_file, hash, prefix, def)
{
    local r;

    if (r = load_ref_document(in_file))
        save_ref_document(out_file, r, hash, prefix, def);
}


/*****************/

update_ref_document(
    "doc/mp_configuration.gmi",
    "doc/mp_configuration.gmi",
    mp.config, "mp.config");

local axns = load_ref_document("doc/mp_actions.gmi");

/* travel all actions and fill undefined ones with a template */
foreach (axn, (mp.actions + mp_doc.actions)->map(index)) {
    if (!exists(axns.data, axn)) {
        axns.data[axn] = "__\n\nTo be written.";
    }
}

/* now travel the document and fill descriptions and keycodes */
local all_keycodes = mp.keycodes + mp_doc.keycodes;
foreach (axn, axns.data->map(index)) {
    /* split content by lines */
    local c = axns.data[axn]->split("\n");

    /* get action description */
    local fl = mp.actdesc[axn];
    local kcs = [];

    /* now iterate all keycodes and add the ones that trigger this action */
    foreach (kaxn, kc, all_keycodes) {
        if (kaxn == axn)
            kcs->push(kc);
    }

    /* if there is any keycode, add to first line */
    if (size(kcs))
        fl += " [" + kcs->sort()->join(", ") + "]";

    /* substitute first line and replace */
    c[0] = fl;
    axns.data[axn] = c->join("\n");
}

save_ref_document("doc/mp_actions.gmi", axns, axns.data);

local f;

if ((f = open('doc/mp_keycodes.txt', 'w')) != NULL) {
    f->write("Minimum Profit Keycodes\n");
    f->write("=======================\n\n");

    f->write("Table with Minimum Profit's keycodes and their default assigned actions.\n\n");

    local tbl = " +---------------------+--------------------------+\n";

    f->write(tbl, sprintf(" | %19s | %24s |\n", 'Keycode', 'Action'), tbl);

    foreach(k, sort(map(all_keycodes, sub (v, i) { i; } ))) {
        if (type(all_keycodes[k]) != "object")
            f->write(sprintf(" | %19s | %24s |\n", k, all_keycodes[k]), tbl);
    }

    f->write("\n");

    f->close();
}
